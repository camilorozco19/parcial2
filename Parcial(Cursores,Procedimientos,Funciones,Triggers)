1. Generar una función que retorne cuantos años tiene una persona.


CREATE OR REPLACE FUNCTION calcular_edad(fecha_nacimiento VARCHAR2) RETURN NUMBER IS
    fecha_actual DATE := TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD'), 'YYYY-MM-DD');
    fecha_nac DATE := TO_DATE(fecha_nacimiento, 'YYYY-MM-DD');
BEGIN
    RETURN TRUNC(MONTHS_BETWEEN(fecha_actual, fecha_nac) / 12);
END;

SELECT calcular_edad('1969-01-25') AS Años_Persona FROM DUAL;

-------------------------------------------------------------------------------------------------------------------------

2. los niños y viejos y enfermos no pueden trabajar en la mina. por ello cree un trigger que
sea capaz de garantizar que ningún empleado viole esas restricciones.


CREATE OR REPLACE TRIGGER validar_ingreso
BEFORE INSERT OR UPDATE
ON workers
FOR EACH ROW
    DECLARE
        var_edad NUMBER;
        var_healthy NUMBER;
        BEGIN
            SELECT EXTRACT(YEAR FROM CURRENT_DATE)-EXTRACT(YEAR FROM BIRTHDATE)
                INTO var_edad FROM PERSONS 
                    WHERE persons_id=:NEW.persons_id;
            SELECT diagnostics_id into var_healthy
                from persons_medical_check
                    where persons_id=:NEW.persons_id;
            IF(var_healthy!=1) then
                raise_application_error(-20001,'La persona con el id' || :NEW.persons_id || 'NO ES APTA');
            END IF;
            IF(var_edad<12 OR var_edad>70) then
                raise_application_error(-20001,'La PERSONA CON EL ID ' || :NEW.persons_id || 'NO PUEDE TRABAJAR');
            END IF;
            
    END validar_ingreso;

------------------------------------------------------------------------------

3.Cree un procedimiento que registre un trabajador. tabla: workers Nota: validar que la
persona exista antes de registrar como trabajador.

CREATE OR REPLACE PROCEDURE register_worker (
    p_id_number IN NUMBER,
    p_mines_id IN VARCHAR2,
    p_persons_id IN VARCHAR2,
    p_ingress_date IN VARCHAR2
)
IS
    v_person_exists NUMBER;
BEGIN
   
    SELECT COUNT(*) INTO v_person_exists
    FROM persons
    WHERE id = p_persons_id;

       IF v_person_exists > 0 THEN
        INSERT INTO workers (id, mines_id, persons_id, ingressDate)
        VALUES (p_id_number, p_mines_id, p_persons_id, p_ingress_date);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Trabajador registrado correctamente.');

    ELSE
        DBMS_OUTPUT.PUT_LINE('Error: La persona no existe en la base de datos.');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al intentar registrar al trabajador.');
END register_worker;

EXECUTE register_worker (132,'3','432','2020-4-13');


------------------------------------------------------------------------

4 crear un cursor que muestre el id, nombre, apellido, fecha de nacimiento de todas las
mujeres que trabajan en una mina, la mina debe ser indicada por entrada de teclado


DECLARE
    CURSOR c_mujeres_mina (p_mina_nombre VARCHAR2) IS
        SELECT p.id, p.name, p.lastname, p.birthdate
        FROM persons p
        JOIN workers w ON p.id = w.persons_id
        JOIN mines m ON w.mines_id = m.id
        WHERE p.sex = 'F' AND m.mine_name = p_mina_nombre;
    
    v_mina_nombre VARCHAR2(100);
BEGIN
        v_mina_nombre := '&1'; 
    
        OPEN c_mujeres_mina(v_mina_nombre);
    
        DBMS_OUTPUT.PUT_LINE('ID | Nombre | Apellido | Fecha de Nacimiento');
    DBMS_OUTPUT.PUT_LINE('-');
    FOR r_mujer IN c_mujeres_mina(v_mina_nombre) LOOP
        DBMS_OUTPUT.PUT_LINE(r_mujer.id || ' | ' || r_mujer.name || ' | ' || r_mujer.lastname || ' | ' || r_mujer.birthdate);
    END LOOP;
    
       CLOSE c_mujeres_mina;
END;

-----------------------------------------------------------------------------------------------------------------------------------------------------

5. crear una función que retorne si un trabajador está vivo o muerto.


CREATE OR REPLACE FUNCTION estado_vida_trabajador(p_person_id IN NUMBER) RETURN VARCHAR2 IS
    v_estado VARCHAR2(10);
BEGIN
   
    SELECT COUNT(*) INTO v_estado
    FROM persons_defuntions
    WHERE persons_id = p_person_id;

    IF v_estado > 0 THEN
        RETURN 'Muerto';
    ELSE
        RETURN 'Vivo';
    END IF;
END;

SELECT estado_vida_trabajador(88) AS estado_de_vida FROM DUAL;

---------------------------------------------------------------------------------------------

6 - crear una función que retorne la cantidad de kilos que produce de una mina.

CREATE OR REPLACE FUNCTION calcular_kilos_producidos(
    p_mine_id IN NUMBER
) 
RETURN NUMBER
IS
    v_total_kilos NUMBER := 0;
BEGIN
 
    SELECT SUM(kg_product)
    INTO v_total_kilos
    FROM product_worker pw
    INNER JOIN mines m ON pw.products_id = m.product_id
    WHERE m.id = p_mine_id;

    
    IF v_total_kilos IS NULL THEN
        RETURN 0;
    ELSE
        RETURN v_total_kilos;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0; 
END;

SELECT calcular_kilos_producidos(5) AS kilos_producidos FROM dual;


--------------------------------------------------------------------------------------------------------------------------------------

7. Generar un CURSOR de trabajadores que muestre:id, nombre, apellido, sexo, edad de todos los menores de edad que han muerto


DECLARE
    CURSOR c_personas_fallecidas IS
        SELECT
            p.id,
            p.name,
            p.lastname,
            p.sex,
            TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(p.birthdate, 'YYYY-MM-DD')) / 12) AS edad
        FROM
            persons p
        JOIN
            persons_defuntions pd ON p.id = pd.persons_id
        JOIN
            deaths d ON pd.deaths_id = d.id
        WHERE
            TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(p.birthdate, 'YYYY-MM-DD')) / 12) < 18;
BEGIN
    OPEN c_personas_fallecidas;
    FOR persona IN c_personas_fallecidas
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || persona.id || ', Nombre: ' || persona.name || ', Apellido: ' || persona.lastname || ', Sexo: ' || persona.sex || ', Edad: ' || persona.edad);
    END LOOP;
    CLOSE c_personas_fallecidas;
END;

-----------------------------------------------------------------------------------------------------------------------------------

8. Generar un procedimiento que dando el nombre una mina que se ingresa por teclado
retorne la cantidad de trabajadores infectados con VIH.

CREATE OR REPLACE PROCEDURE CONTAR_TRABAJADORES_INFECTADOS(
    p_mina_nombre IN VARCHAR2
) 
IS
    v_total_trabajadores NUMBER;
BEGIN
    
    SELECT id INTO v_total_trabajadores
    FROM mines
    WHERE mine_name = p_mina_nombre;

  
    SELECT COUNT(*) INTO v_total_trabajadores
    FROM workers w
    JOIN persons_medical_checks pmc ON w.persons_id = pmc.persons_id
    JOIN diagnostics d ON pmc.diagnosis_id = d.id
    WHERE w.mines_id = v_total_trabajadores
      AND d.diagnosty = 'AID';

    
    DBMS_OUTPUT.PUT_LINE('La cantidad de trabajadores infectados con VIH en la mina ' || p_mina_nombre || ' es: ' || v_total_trabajadores);
END;


DECLARE
    v_mina_nombre VARCHAR2(100) := 'Nigeria'; 
BEGIN
    CONTAR_TRABAJADORES_INFECTADOS(v_mina_nombre);
END;

---------------------------------------------------------------------------------------

9.Cree un procedimiento que muestre el mejor trabajador de cada mina


CREATE OR REPLACE PROCEDURE mejor_trabajador
AS
	var_persona VARCHAR(200);
BEGIN
	FOR I IN (
	SELECT m1.mine_name AS mina, q1.persons_id AS persona, MAX(q1.suma) AS kg_recolectados
FROM (
	SELECT M.mine_name, pw.persons_id, SUM(pw.kg_product) AS suma
FROM product_worker pw
	INNER JOIN mines M ON pw.products_id = M.products_id
	GROUP BY M.mine_name, pw.persons_id
)  q1
INNER JOIN (
	SELECT mine_name, MAX(suma) AS max_suma
	FROM (
	SELECT M.mine_name, pw.persons_id, SUM(pw.kg_product) AS suma
	FROM product_worker pw
	INNER JOIN mines M ON pw.products_id = M.products_id
	GROUP BY M.mine_name, pw.persons_id
)  
	GROUP BY mine_name
)  	m1 ON q1.mine_name = m1.mine_name AND q1.suma = m1.max_suma
	GROUP BY m1.mine_name, q1.persons_id
)
 LOOP
	SELECT NAME INTO var_persona FROM persons WHERE PERSONS_ID= I.persona;
	DBMS_OUTPUT.PUT_LINE('NOMBRE: '||var_persona||' |ID: '||I.persona||' | EL MEJOR TRABAJADOR DE LA MINA  '||UPPER(I.mina)||' |RECOLECTÓ: '||I.kg_recolectados||'KG');
END LOOP;
END;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
